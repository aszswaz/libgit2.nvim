*libgit2-nvim* Libgit2's Neovim Lua interfce.

Author: aszswaz <aszswaz@163.com>

--------------------------------------------------------------------------
CONTENTS

 1. Introduction                           |libgit2-nvim-introduction|
 2. Repository API                         |libgit2-nvim-repository|
 3. Index API                              |libgit2-nvim-index|
 4. Revparse API                           |libgit2-nvim-revparse|
 5. Tree API                               |libgit2-nvim-tree|
 6. Signature API                          |libgit2-nvim-signature|
 7. Commit API                             |libgit2-nvim-commit|
 8. Remote API                             |libgit2-nvim-remote|

--------------------------------------------------------------------------
 1. INTRODUCTION                               *libgit2-nvim-introduction*

libgit2 is the c language api implementation of git.libgit2-nvim wraps
libgit2, which is convenient to use libgit2 directly from neovim's vimscript
or lua script.

Note: Must be initialized before calling all functions. >
    local git = require("libgit2")
    -- Initialize git global variables.
    git.init()

    ...

    -- Recycle git global variables.
    git.git_shutdown()
<

--------------------------------------------------------------------------
 2. REPOSITORY API                               *libgit2-nvim-repository*

repository.init({path}, {is_bare})          *libgit2-nvim-repository.init*
Initialize a repository.

    Paramaters: ~
        • {path}    The path to the repository.
        • {is_bare} Whether to create a bare repository, the default is false.

    Return: ~
        A handle to the repository.

repository.open({path})                     *libgit2-nvim-repository.open*
Open an existing repository.

    Paramaters: ~
        • {path}    The path to the repository.

    Return: ~
        A handle to the repository.

repository.open_ext({path}, {options})  *libgit2-nvim-repository.open_ext*
Open an existing repository. Unlike |libgit2-nvim-repository.open|,
repository.open_ext supports recursive upward lookup of the repository, and
also supports reading the path of the repository from the environment
variable.

    Paramaters: ~
        • {path}    The path to the repository.
        • {options} Initialization options for the repository.
            {ceiling_dirs}: Encountered path ceiling_dirs while recursing
            upwards, stop looking for repository.
            {no_search}: Repositories are not looked up recursively. The
            default is false.
            {cross_fs}: Whether to allow crossing filesystems when recursively
            looking up repositories. The default is false.
            {bare}: Whether it is a bare repository.
            {no_dotgit}: Do not check for a repository by appending /.git
            to the start_path; only open the repository if start_path itself
            points to the git directory. The default is false.
            {from_env}: Find and open a git repository, respecting the
            environment variables used by the git command-line tools.
            If set, `git_repository_open_ext` will ignore the other flags
            and he `ceiling_dirs` argument, and will allow a NULL `path`
            to use `GIT_DIR` or search from the current directory. The search
            for a repository will respect $GIT_CEILING_DIRECTORIES and
            $GIT_DISCOVERY_ACROSS_FILESYSTEM.  The opened repository will
            respect $GIT_INDEX_FILE, $GIT_NAMESPACE, $GIT_OBJECT_DIRECTORY, and
            $GIT_ALTERNATE_OBJECT_DIRECTORIES. In the future, this flag will also
            cause `git_repository_open_ext` to respect $GIT_WORK_TREE and
            $GIT_COMMON_DIR; currently, `git_repository_open_ext` with this
            flag will error out if either $GIT_WORK_TREE or $GIT_COMMON_DIR
            is set.

    Return: ~
        Returns the repository's handle if found, or {nil} if not found.

repository.discover({path}, {across_fs})   *libgit2-nvim-repository.discover*
{path} may be a subdirectory of a repository, recursively look up repositories
until the first repository is found.

    Paramaters: ~
    • {path} The path of the repository.
    • {across_fs} Whether to lookup repositories across filesystems.

    Return: ~
        The real path to the repository.

repository.index({repo})                   *libgit2-nvim-repository.index* Get
the index handle for the repository.

    Paramaters: ~
        • {repo} A handle to the repository.

    Return: ~
        Handle to the repository index.

--------------------------------------------------------------------------
 3. INDEX API                                         *libgit2-nvim-index*

index.write({index})                            *libgit2-nvim-index.write*
Save the index to disk.

    Paramaters: ~
        • {index} The index handle of the repository.

index.write_tree({index})

    This method will scan the index and write a representation of its current
    state back to disk; it recursively creates tree objects for each of the
    subtrees stored in the index, but only returns the OID of the root tree.
    This is the OID that can be used e.g. to create a commit. The index
    instance cannot be bare, and needs to be associated to an existing
    repository. The index must not contain any file in conflict.

    Paramaters: ~
        • {index} The index of the repository.

    Return: ~
        The oid of the root tree.

index.add_bypath({index}, {path})          *libgit2-nvim-index.add_bypath* Add
the specified file to the repository's index.

    Paramaters: ~
        • {index} Handle to the repository index.
        • {path} The files to add to the index.

--------------------------------------------------------------------------
 4. REVPARSE                                       *libgit2-nvim-revparse*

revparse.ext({repo}, {ref_name})

    Get the handle of the ref and the last committed object (handle) of the
    ref by {ref_name}.

    Paramaters: ~
        • {repo} Repository handle.
        • {ref_name} The name of the
    reference, such as "HEAD".

    Return: ~
    If the repository does not have a first commit, the return value
    is two nils, otherwise the return values are as follows:
        • {parent} The `git_object` of the last commit.
        • {ref} Reference handle.

--------------------------------------------------------------------------
 5. TREE                                               *libgit2-nvim-tree*

tree.lookup({repo}, {tree_oid})

    Find the tree corresponding to {tree_oid} in the repository.

    Paramaters: ~
    • {repo} Repository handle.
    • {tree_oid} the oid of the tree.

    Return: ~
        A handle to the tree.

--------------------------------------------------------------------------
 6. SIGNATURE                                     *libgit2-nvim-signature*

signature.default({repo})

    This looks up the user.name and user.email from the configuration and uses
    the current time as the timestamp, and creates a new signature based on
    that information. It will return nil if either the user.name or user.email
    are not set.

    Paramaters: ~
        • {repo} A handle to the repository.

    Return: ~
    A signature object with the following attributes:
        {name} user name.
        {email} user email.
        {when} The time the signature was created.
            {time} Unix timestamp, unit: second.
            {offset} Time zone offset, unit: minute.
            {sign} Prefix for UTC time zone, "+" or "-".

--------------------------------------------------------------------------
 7. COMMIT                                           *libgit2-nvim-commit*

 commit.create({repo}, {update_ref}, {author}, {commiter}, {message_encoding}
 {message}, {tree}, {parents})                *libgit2-nvim-commit.create*

    Create a commit.

    Paramaters: ~
        • {repo} Repository handle.
        • {update_ref} The reference to update, such as "HEAD".
        • {author} author
        • {commiter} commiter
        • {message_encoding} The charset encoding of the commit message,
        such as "UTF-8", nil is allowed.
        • {message} commit message.
        • {tree} Tree handle.
        • {parents} The parent node of this submission, this is a list,
        at least one element is required.

    Return: ~
        The oid of the commit.

Example: >
    local git = require "libgit2"

    local repo = git.repository.init("/dev/shm")
    local parent, ref = git.revparse.ext(repo, "HEAD")
    local index = git.repository.index(repo)
    local root_tree_oid = git.index.write_tree(index)
    git.index.write(index)
    local tree = git.tree.lookup(repo, root_tree_oid)
    local sign = git.signature.default(repo)
    local commit_id = git.commit.create( repo, "HEAD", sign, sign, nil,
    "first commit", tree, { parent })
<
--------------------------------------------------------------------------
 8. REMOTE                                           *libgit2-nvim-remote*

remote.lookup({repo}, {name})                 *libgit2-nvim-remote.lookup*
    Get the handle of the remote repository.

    Paramaters: ~
        • {repo} Repository handle.
        • {name} Remote name.

    Return: ~
        Remote handle.

remote.push({remote}, {ref}, {options})         *libgit2-nvim-remote.push*
    Push to remote repository.

    Paramaters: ~
        • {remote} Remote handle.
        • {ref} Reference files for branches.
        • {options} Push options.

Example: >
    local git = require "libgit2"

    local repo = git.repository.init("/dev/shm")
    local remote = git.remote.lookup(repo, "origin")
    local options = git.push.options_init(git._PUSH_VERSION)
    git.remote.push(remote, "refs/heads/master", options)
<
--------------------------------------------------------------------------
vim:isk=!-~,^*,^\|,^\":ft=help:formatoptions+=t:tw=78
